on:
  pull_request:
    branches:
      - main
name: Test
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./pkg/...

      - uses: codecov/codecov-action@v2
        with:
          files: ./coverage.out
          flags: unittests # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

      - name: Install skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
          sudo install skaffold /usr/local/bin/

      - name: Test skaffold
        run: |
          skaffold version

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Interact with the cluster
        run: |
          kubectl get nodes
          echo "hostname : $(hostname)"

      - name: Wait for minikube to be ready
        run: |
          try=0
          maxtry=10

          while [[ $(kubectl get --raw='/readyz') != "ok" ]] && (( try != maxtry )); do
            try=$((try+1))
            echo "waiting for kubernetes api server to be ready...${try}/${maxtry}" &&  sleep 10;
          done

          try=0
          while [[ $(kubectl get node "$(hostname)" -o 'jsonpath={.status.conditions[?(@.type=="Ready")].status}') =~ "False" ]] && (( try != maxtry )); do
            try=$((try+1))
            echo "waiting for server to be ready...${try}/${maxtry}" &&  sleep 10;
          done

      - name: Skaffold run
        run: |
          skaffold run -m e2e

      - name: Test deployment
        run: |
          kubectl get svc lnkshrtn -n lnkshrtn
          local_port=$(kubectl get svc lnkshrtn -n lnkshrtn -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
          curl http://localhost:"${local_port}"/health
          curl -X POST http://localhost:"${local_port}"/links -H 'Content-Type: application/json' -d '{"url": "https//www.example.com","shortned": "abcd1234"}'
          curl http://localhost:"${local_port}"/links
          curl http://localhost:"${local_port}"/links/abcd1234

      - name: Copy code coverage
        run: |
          e2e_pod=$(kubectl get po -n lnkshrtn --selector=app.kubernetes.io/instance=lnkshrtn -o jsonpath='{.items[0].metadata.name}')
          kubectl describe po "${e2e_pod}" -n lnkshrtn
          kubectl delete po "${e2e_pod}" --wait=false -n lnkshrtn --grace-period 120
          sleep 10
          kubectl cp lnkshrtn/${e2e_pod}:/data/list.cov ./e2e-coverage.out -c pause

      - uses: codecov/codecov-action@v2
        with:
          files: ./e2e-coverage.out
          flags: e2e # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
